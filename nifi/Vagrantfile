# -*- mode: ruby -*-
# vi: set ft=ruby :

required_plugins = %w( vagrant-proxyconf vagrant-hostmanager )
plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
  puts "Installing plugins: #{plugins_to_install.join(' ')}"
  if system "vagrant plugin install #{plugins_to_install.join(' ')}"
    exec "vagrant #{ARGV.join(' ')}"
  else
    abort "Installation of one or more plugins has failed. Aborting."
  end
end

# Resize the root volume group online.
$resize_volume_group = <<RESIZE_VOLUME_GROUP_SCRIPT
set -x
df -h /
fdisk /dev/sda <<FDISK_EOF
d
2
n
p
2


t
2
8e
p
w
FDISK_EOF
partprobe
pvresize /dev/sda2
lvextend -l +100%FREE /dev/centos_centos7/root
fsadm resize  /dev/mapper/centos_centos7-root
df -h /
RESIZE_VOLUME_GROUP_SCRIPT

# Using yaml to load external configuration files
require 'yaml'

cwd = Dir.pwd.split("/").last
username = ENV['USER']
node_count = ENV['NODE_COUNT'] || 3
node_count = node_count.to_i
domain_prefix = "#{username}-#{cwd}"
vagrant_api_version = "2"
zk_connect_string = ""
(1..node_count).each do |i|
  if zk_connect_string.length > 1
    zk_connect_string += ","
  end
  zk_connect_string += "nifi0#{i}:2181"
end

Vagrant.configure(vagrant_api_version) do |config|
  # Using the hostmanager vagrant plugin to update the host files
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = true
  config.hostmanager.ignore_private_ip = false
  (1..node_count).each do |i| 
    config.vm.define "nifi0#{i}" do |srv|
      srv.vm.box = "generic/centos7" # Speciy the name of the Vagrant box file to use
      srv.vm.hostname = "nifi0#{i}" # Set the hostname of the VM
      srv.vm.network "private_network", ip: "192.168.56.#{i + 100}", :adapater=>2 # Add a second adapater with a specified IP
      srv.vm.network :forwarded_port, guest: 22, host: "#{i * 100 + 10022}" # Add a port forwarding rule
      srv.vm.provision :shell, inline: "sed -i'' '/^127.0.0.1\t#{srv.vm.hostname}\t#{srv.vm.hostname}$/d' /etc/hosts"
      srv.vm.provider "libvirt" do |libvirt|
        libvirt.cpus = 2 # How many CPUs to allocate to the VM
        libvirt.memory = 2048 # How much memory to allocate to the VM
        libvirt.machine_virtual_size = 80 # Storage in gigabytes
        libvirt.graphics_type = "none"
        libvirt.default_prefix = "#{domain_prefix}"
      end
      srv.vm.provision :shell, inline: $resize_volume_group
      # Configure the proxy using the "vagrant-proxyconf" plugin.
      srv.proxy.http     = "http://10.160.17.210:3128/"
      srv.proxy.https    = "http://10.160.17.210:3128/"
      srv.proxy.no_proxy = "localhost,127.0.0.1,192.168.0.0/16"
      srv.vm.synced_folder "packages", "/vagrant/packages", type: "rsync"
      srv.vm.provision :shell, path: "scripts/bootstrap.sh"
      srv.vm.provision :shell, path: "scripts/install_nifi.sh"
      if node_count > 1
        puts "**** CLUSTERED #{zk_connect_string}"
        srv.vm.provision :shell, path: "scripts/setup_zookeeper.sh", env: {"ZOOKEEPER_CONNECT_STRING" => "#{zk_connect_string}"}
        srv.vm.provision :shell, path: "scripts/setup_nifi.sh", env: {"ZOOKEEPER_CONNECT_STRING" => "#{zk_connect_string}"}
      else
        puts "**** NOT-CLUSTERED #{zk_connect_string}"
        srv.vm.provision :shell, path: "scripts/setup_nifi.sh", env: {"ZOOKEEPER_CONNECT_STRING" => ""}
      end
    end
  end
end
